#define SIZE 10  // Initial size of the hash table
#define LOAD_THRESHOLD 0.7  // Load factor threshold for rehashing

// Node structure for chaining (Closed Addressing)
typedef struct Node {
    int key;
    int value;
    struct Node* next;
} Node;

// Hash table structure
typedef struct {
    int size;      // Current size of the hash table
    int capacity;  // Maximum capacity of the hash table
    Node** array;  // Array of Node pointers (for chaining)
} HashTable;
int hashFunction(int key, int size) {
    return key % size;
}
HashTable* createHashTable(int capacity) {
    HashTable* ht = (HashTable*) malloc(sizeof(HashTable));
    ht->capacity = capacity;
    ht->size = 0;
    ht->array = (Node**) malloc(sizeof(Node*) * capacity);
    for (int i = 0; i < capacity; ++i)
        ht->array[i] = NULL;
    return ht;
}
void insertLinearProbe(HashTable* ht, int key, int value) {
    int index = hashFunction(key, ht->capacity);
    while (ht->array[index] != NULL) {
        index = (index + 1) % ht->capacity;  // Linear probing
    }
    ht->array[index] = createNode(key, value);
    ht->size++;
}
void insertLinearProbe(HashTable* ht, int key, int value) {
    int index = hashFunction(key, ht->capacity);
    while (ht->array[index] != NULL) {
        index = (index + 1) % ht->capacity;  // Linear probing
    }
    ht->array[index] = createNode(key, value);
    ht->size++;
}
void rehash(HashTable** ht) {
    int oldCapacity = (*ht)->capacity;
    (*ht)->capacity *= 2;
    Node** newArray = (Node**) malloc(sizeof(Node*) * (*ht)->capacity);
    for (int i = 0; i < (*ht)->capacity; ++i)
        newArray[i] = NULL;
    for (int i = 0; i < oldCapacity; ++i) {
        Node* head = (*ht)->array[i];
        while (head != NULL) {
            Node* next = head->next;
            int index = hashFunction(head->key, (*ht)->capacity);
            if (newArray[index] == NULL) {
                newArray[index] = head;
                head->next = NULL;
            } else {
                head->next = newArray[index];
                newArray[index] = head;
            }
            head = next;
        }
    }
    free((*ht)->array);
    (*ht)->array = newArray;
}
int main() {
    HashTable* ht = createHashTable(SIZE);

    insertChaining(ht, 1, 10);
    insertChaining(ht, 11, 20);
    // Insert more elements as needed

    // Test other operations: search, delete, etc.

    return 0;
}
